<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap SYSTEM "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<!--  @author:楼鹏晖  -->
<sqlMap namespace="purchase_note">
	<typeAlias alias="purchase_note"
		type="com.zzqa.pojo.purchase_note.Purchase_note" />

	<resultMap id="result_basc" class="purchase_note">
		<result property="id" column="id" />
		<result property="sales_id" column="sales_id" />
		<result property="purchase_id" column="purchase_id" />
		<result property="product_id" column="product_id" />
		<result property="num" column="num" />
		<result property="hasbuy_num" column="hasbuy_num" />
		<result property="m_id" column="m_id" />
		<result property="unit_price_taxes" column="unit_price_taxes" />
		<result property="predict_costing_taxes" column="predict_costing_taxes" />
		<result property="delivery_time" column="delivery_time" />
		<result property="remark" column="remark" />
		<result property="aog_time" column="aog_time" />
		<result property="aog_num" column="aog_num" />
	</resultMap>
	<resultMap id="result_basc2" class="purchase_note">
		<result property="id" column="id" />
		<result property="sales_id" column="sales_id" />
		<result property="purchase_id" column="purchase_id" />
		<result property="product_id" column="product_id" />
		<result property="num" column="num" />
		<result property="hasbuy_num" column="hasbuy_num" />
		<result property="m_id" column="m_id" />
		<result property="unit_price_taxes" column="unit_price_taxes" />
		<result property="predict_costing_taxes" column="predict_costing_taxes" />
		<result property="delivery_time" column="delivery_time" />
		<result property="remark" column="remark" />
		<result property="operation" column="operation" />
		<result property="aog_time" column="aog_time" />
		<result property="aog_num" column="aog_num" />
	</resultMap>


	<!-- 添加 -->
	<insert id="insertPurchase_note" parameterClass="purchase_note">
		insert into purchase_note(sales_id,purchase_id,product_id,num,m_id,hasbuy_num,unit_price_taxes,predict_costing_taxes,delivery_time,remark,aog_time,aog_num)
		values(#sales_id#,#purchase_id#,#product_id#,#num#,#m_id#,#hasbuy_num#,#unit_price_taxes#,#predict_costing_taxes#,#delivery_time#,#remark#,#aog_time#,#aog_num#)
	</insert>
	
	<!-- 修改 -->
    <update id="updatePurchase_note" parameterClass="purchase_note">
        update purchase_note set 
        sales_id=#sales_id#,
        purchase_id=#purchase_id#,
        product_id=#product_id#,
        num=#num#,
        hasbuy_num=#hasbuy_num#,
        m_id=#m_id#,
        unit_price_taxes=#unit_price_taxes#,
        predict_costing_taxes=#predict_costing_taxes#,
        delivery_time=#delivery_time#,
        remark=#remark#,
        aog_time=#aog_time#,
        aog_num=#aog_num#
        where id = #id#
    </update>

	<!-- 通过id删除 -->
    <delete id="delPurchase_noteByID" parameterClass="int" >
        delete from purchase_note where id=#id#
    </delete>
	
	<select id="getPurchase_noteByID" parameterClass="int" resultClass="purchase_note">
		select * from purchase_note where id=#id#
	</select>
	
	<select id="getCountByProductID" parameterClass="java.util.Map" resultClass="int">
		select sum(num) from purchase_note where product_id=#product_id# 
		and (select operation from flow where flow.foreign_id=purchase_note.purchase_id and flow.type=12 order by flow.id desc limit 1 )!=11
		<isGreaterThan property="purchase_id" compareValue="0">
			and purchase_id!=#purchase_id#
		</isGreaterThan>
	</select>
	<select id="getFinishedCountByProductID" parameterClass="int" resultClass="int">
		select sum(num) from purchase_note where product_id=#product_id# 
		and (select operation from flow where flow.foreign_id=purchase_note.purchase_id and flow.type=12 order by flow.id desc limit 1 )=10
	</select>
	
	<select id="getPurchase_notesByPID" parameterClass="int" resultMap="result_basc">
		select * from purchase_note where purchase_id=#purchase_id#
	</select>
	
	<select id="getPurchase_noteIDsByPID" parameterClass="int" resultClass="int">
		select id from purchase_note where purchase_id=#purchase_id#
	</select>
	
	<select id="checkProductInPurchase" parameterClass="int" resultClass="int">
		select count(id) from purchase_note where product_id=#product_id#
	</select>
	<update id="reSetHasBuyNum" parameterClass="int">
		update purchase_note set hasbuy_num=0 where purchase_id=#purchase_id#
	</update>
	<select id="getPurchase_notesByProductID" parameterClass="int" resultMap="result_basc2">
		select purchase_note.*,f.operation from purchase_note left join 
		(select operation,foreign_id from 
			(select operation,foreign_id,id,type from flow  where type=12 order by id desc limit 10000000)as t
		GROUP BY foreign_id order by id desc) as f 
		on purchase_note.purchase_id=f.foreign_id where  f.operation!=11 and product_id=#product_id# 
	</select>
	<update id="updateHasbuy_numFromNum" parameterClass="int">
		update purchase_note set hasbuy_num=num where purchase_id=#purchase_id#
	</update>
</sqlMap>